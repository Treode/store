#!/bin/bash -x

# Build, test and package before merging into the master branch.
#
# This script works with the Jenkins service. Jenkins triggers the build whenever there is a push
# on a merge branch (that is a branch named 'merge/*'). It runs this script, and if it is
# successful, then Jenkins merges the change into the master branch. This script produces a .tgz
# file containing all files that need to be put on oss.treode.com.
#
# Specifically, this script
# 1) Builds and tests the libraries for the Treode store.
# 2) Publishes those libraries locally.
# 3) Builds and test sthe examples using the locally published libraries.
# 4) Builds the Scala docs.
# 5) Stages everything for the .tgz file, and then packages it.
#
# Actually putting the files on oss.treode.com requires a password, so that has been left for a
# person.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SBT=$DIR/sbt

# Really clean everything.
git clean -dfx

# Check that every version number is in sync.
version=`scripts/version-number \
  project/TreodeBuild.scala \
  examples/finatra/build.sbt \
  examples/movies/build.sbt`
if [ $? -ne 0 ] ; then
  exit 1
fi

# If not a snapshot, check that this release is new.
case $version in
*-SNAPSHOT)
  ;;
*)
  if [ -n "`git tag -l release/$version`" ] ; then 
    echo "Tag release/$version already exists"
    exit 1
  fi
  ;;
esac

# SBT has had trouble compiling, testing and assembling in one go. So we have broken the steps
# into separate commands.

scripts/sbt +test:compile >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

scripts/sbt +test >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

scripts/sbt +intensive:test >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

# Publish the artifacts to the local ivy cache so that we can build and test the examples.
scripts/sbt ++2.10.4 publish-local >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

(cd examples/finatra; $SBT test assembly) >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

(cd examples/movies; $SBT test assembly) >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

scripts/sbt unidoc >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

# Publish the IVY artifacts to the staging area.
scripts/sbt +publish >> build.log
if [ $? -ne 0 ] ; then
  exit 1
fi

# Copy the documentation and assembly jars to the staging area.
mkdir -p stage/docs/scala/store
mv target/scala-2.11/unidoc stage/docs/scala/store/$version
mkdir -p stage/jars/examples/finatra/$version
cp examples/finatra/target/scala-2.10/server.jar stage/jars/examples/finatra/$version
mkdir -p stage/jars/examples/movies/$version
cp examples/movies/target/scala-2.10/server.jar stage/jars/examples/movies/$version

tar cz -f stage-$version.tgz -C stage .
if [ $? -ne 0 ] ; then
  exit 1
fi

# Sometimes tests fail and yet SBT exits with a good status.
egrep 'ABORTED|FAILED' build.log
if [ $? -ne 1 ] ; then
  exit 1
fi

exit 0
